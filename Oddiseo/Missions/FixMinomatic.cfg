CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = FixMinomatic

    // Contract text
    title = Fix our Mun Miner
    description = We've just received a disturbing transmission from our team of engineers on the Mun. Apparently, our Minomatic brand mining vessel has had a little... malfunction, 	in that the entire conversion and control module has exploded, with sadly fatal results for one of the team. Obviously, this could only have been as a result of user error, so you can be reassured that the ship is otherwise entirely safe.
    synopsis = The most important thing is that we restore full mining capability as soon as possible. Please rendezvous with the surviving member of the engineering team, deliver a new converter and control unit, and then get liquid fuel and oxygen extraction started up as soon as possible.
    completedMessage = Thank you for restoring mining operations on the Mun! Glumb Kerman has asked your team to remain in control of the mining operation from here on, which frankly seems a little ungrateful to us. Nonetheless, so long as we get the profits, knock yourself out.
	group = Oddiseo
	agent = Oddiseo

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 5.0 and 100.0 days, respectively
    minExpiry = 5.0
    maxExpiry = 25.0

    // Contract deadline in days.  Default is no deadline.
    deadline = 25

	// Prestige.  If not specified, this contract type will be available at
    // any prestige level.  Otherwise, locked to the level specified.  Can
    // be specified multiple times.
    // Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Significant

    // The maximum number of times this contract type can be completed (0
    // being unlimited).
    // Default = 0
    maxCompletions = 1
	
    // The maximum instances of this contract that can be active at one
    // time.
    // Default = 4 (unless maxCompletions is set).
    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Mun

    // Contract rewards.  Note that advanceFunds are automatically added to the
    // failureFunds.
    rewardScience = 2.5
    rewardReputation = 3.0
    rewardFunds = 30000.0
	failureReputation = 1.0
	failureFunds = 0.0
	advanceFunds = 30000.0

    // The REQUIREMENT node defines a contract requirement - a prerequisite
    // that needs to be met before the contract can be offered.  The
    // following shows an example requirement.  See the Requirements page
    // for examples of all supported requirements.
    REQUIREMENT
	{
		name = Landing
		type = Landing

		// Type of check to perform (manned or unmanned).  If not specified then
		// achieving this via either an unmanned or manned will count.
		//
		// Type:      ProgressCelestialBodyRequirement.CheckType
		// Required:  No
		// Values:
		//     MANNED
		//     UNMANNED
		//
		checkType = MANNED

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:      CelestialBody
		// Required:  No (defaulted)
		//
		targetBody = Mun
	}

	PARAMETER
	{
		name = PartValidation
		type = PartValidation

		// The name of the part to check for.  If multiple are specified, will
		// match on ANY of the parts listed.
		//
		// Type:      AvailablePart
		// Required:  No (multiples allowed)
		//
		part = MiniISRU
		part = ISRU

		// PartModule(s) to check for.  If multiple are specified, requires that
		// the given parts have ALL the partModules listed.
		//
		// Type:      string
		// Required:  No (multiples allowed)
		//
		//partModule = 

		// Type of PartModule to check for.  Similar to partModule, but more
		// generic.
		//
		// Type:      string
		// Required:  No (multiples allowed)
		// Values (defined in ContractDefs):
		//     Antenna
		//     Battery
		//     Dock
		//     Generator
		//     Grapple
		//     Wheel
		//partModuleType =

		// Extended PartModule check.  This is used to look for very specific part
		// module attributes.  The MODULE node may contain any attribute, and those
		// attributes will be matched against the part modules in the parts.  Each
		// attribute can be preceded by a label attribute, which will override the
		// logic that attemps derives an English name from the key (e.g
		// "experimentID" would become "Experiment ID").  The label also allows
		// localisation to be supported
		//
		// Required:  No (multiples allowed)
		//
		//MODULE
		//{
		//	name = ModuleScienceExperiment
		//
		//	label = Experiment
		//	experimentID = mysteryGoo
		//
		//	label = Other Thing
		//	otherThing = anotherAttribute
		//}

		// Part manufacturer to check for.
		//
		// Type:      string
		// Required:  No
		//
		//manufacturer = Kerbodyne

		// Part category to check for.
		//
		// Type:      PartCategories
		// Required:  No
		// Values:
		//   Aero
		//   Control
		//   Engine
		//   FuelTank
		//   Pods
		//   Science
		//   Structural
		//   Utility
		//
		//category = Engine

		// Minimum and maximum count of matching parts.
		//
		// Type:      int
		// Required:  No (defaulted)
		// Default:   1 (minCount)
		//            int.MaxValue (maxCount)
		//
		minCount = 1
		maxCount =

		// Text to use for the parameter
		//
		// Type:      string
		// Required:  No (defaulted)
		// Default (maxCount: 0) = Part: <attributes>: None
		// Default (maxCount: int.MAXVALUE) = Part: <attributes>: At least <minCount>
		// Default (minCount: 0) = Part: <attributes>: At most <maxCount>
		// Default (minCount: maxCount ) = Part: <attributes>: Exactly <minCount>
		// Default (else): Part: <attributes>: Between <minCount> and <maxCount>
		//
		title = Have a new converter attached to the Minomatic
	}

	PARAMETER
	{
		name = HasResource
		type = HasResource

		RESOURCE
		{
			// The name of the resource to check for.
			//
			// Type:      Resource
			// Required:  Yes
			//
			resource = LiquidFuel

			// Minimum and maximum quantity of the resource required.
			//
			// Type:      double
			// Required:  No (defaulted)
			// Default:   0.01 (minQuantity)
			//            double.MaxValue (maxQuantity)
			//
			minQuantity = 2500.0
			maxQuantity = 
		}

		RESOURCE
		{
			resource = Oxidizer
			minQuantity = 3000.0
			maxQuantity = 
		}

		// Text to use for the parameter
		//
		// Type:      string
		// Required:  No (defaulted)
		// Default:   Resource: <resource>: <quantity_description>
		title = Generate a full tank of Liquid fuel and Oxidizer
	}
	
    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Minomatic

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractPacks/Oddiseo/Vessels/Minomatic.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = True

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            //targetBody = Kerbin

			// Specifies the location of the spawn point via lat/lon.
			//
			// Type:      double
			// Required:  See above
			//
			lat = 22.1
			lon = -79.1
			
			// Specifies the pitch of the vessel in degrees (positive is nose up)
			//
			// Type:      float
			// Required:  No (defaulted)
			// Default:   0.0
			//
			pitch = 270.0
        }
	}
	
    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Mun mini base

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractPacks/Oddiseo/Vessels/Mun mini base.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = True

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            //targetBody = Kerbin

			// Specifies the location of the spawn point via lat/lon.
			//
			// Type:      double
			// Required:  See above
			//
			lat = 22.5
			lon = -79.5
			
			// Specifies the roll of the vessel in degrees (positive = roll right).
			//
			// Type:      float
			// Required:  No (defaulted)
			// Default:   0.0
			//
			//roll = 90.0

			// Specifies the pitch of the vessel in degrees (positive is nose up)
			//
			// Type:      float
			// Required:  No (defaulted)
			// Default:   0.0
			//
			pitch = 180.0

			CREW
			{
				name = Glumb Kerman
				addToRoster = False
			}
        }
	}
	
	BEHAVIOUR
	{
		name = ChangeKerbalType
		type = ChangeKerbalType
		
		onState = CONTRACT_ACCEPTED

		// The KERBAL_INFO node indicates the Kerbal and the changes to be made.
		// This can be specified multiple times for different Kerbals.
		KERBAL_INFO
		{
			// The Kerbal to make changes to.
			//
			// Type:      Kerbal
			// Required:  No
			//
			kerbal = Glumb Kerman

			// The new type of the Kerbal.
			//
			// Type:      ProtoCrewMember.KerbalType
			// Required:  No
			// Values:
			//     Applicant
			//     Crew
			//     Tourist
			//     Unowned
			//
			kerbalType = Crew

			// The new experience trait for this Kerbal.
			//
			// Type:      string
			// Required:  No
			//
			trait = Engineer
		}
	}
}

