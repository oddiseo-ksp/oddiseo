CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExperimentalCraft

    // Contract text
    title = Salvage experimental flight data
    description = Here at Oddiseo Corp we pride ourselves on pushing the boundaries of science. Of course that sometimes means taking some risks. One such risk is our Project Yliad atmospheric experiment plane, which is now gliding without fuel at the edge of space, and not responding to our radio signals. I wouldn't expect somebody such as yourself to even begin to understand the science on-board; the important thing is that we recover the data and bring this experiment to a conclusion before the plane burns up. Ordinarily we could do this ourselves in a jiffy, but our launchpad is a touch... <i>cratery</i> at the moment.
    synopsis = Any idiot could do manage this one-- a fact I'm sure you'll prove. Rendezvous with the plane, fix whatever's wrong with that dang aerial, perform the experiment, transmit the data, and let the plane burn up in the atmosphere so that none of our competitors get their hands on it.
    completedMessage = Well. That's the end of <i>that</i> little episode. If anyone comes sniffing around asking questions about this flight... it didn't happen, OK?

	group = Oddiseo
	agent = Oddiseo

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 5.0 and 100.0 days, respectively
    minExpiry = 5.0
    maxExpiry = 10.0

    // Contract deadline in days.  Default is no deadline.
    deadline = 2

	// Prestige.  If not specified, this contract type will be available at
    // any prestige level.  Otherwise, locked to the level specified.  Can
    // be specified multiple times.
    // Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Significant

    // The maximum number of times this contract type can be completed (0
    // being unlimited).
    // Default = 0
    maxCompletions = 1
	
    // The maximum instances of this contract that can be active at one
    // time.
    // Default = 4 (unless maxCompletions is set).
    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards.  Note that advanceFunds are automatically added to the
    // failureFunds.
    rewardScience = 0.0
    rewardReputation = 5.0
    rewardFunds = 40000.0
	failureReputation = 1.0
	failureFunds = 10000.0
	advanceFunds = 20000.0

    // The REQUIREMENT node defines a contract requirement - a prerequisite
    // that needs to be met before the contract can be offered.  The
    // following shows an example requirement.  See the Requirements page
    // for examples of all supported requirements.
    REQUIREMENT
    {
		name = Orbit
		type = Orbit

		// Type of check to perform (manned or unmanned).  If not specified then
		// achieving this via either an unmanned or manned will count.
		//
		// Type:      ProgressCelestialBodyRequirement.CheckType
		// Required:  No
		// Values:
		//     MANNED
		//     UNMANNED
		//
		checkType = MANNED

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:      CelestialBody
		// Required:  No (defaulted)
		//
		//targetBody = Kerbin
    }

	PARAMETER
	{
		name = Rendezvous
		type = Rendezvous
		distance = 2000.0
		vessel = Project Yliad plane
		title = Get within EVA distance of the plane
	}

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:      CelestialBody
		// Required:  No (defaulted)
		//
		//targetBody = Duna

		// Specifies the biome where science should be collected. This can be any
		// biome that is valid for the target body, but note that it is not 
		// validated due to KSP limitations (so make sure not to make a typo!).
		//
		// Type:      Biome
		// Required:  No
		//
		//biome = Craters

		// Specifies the situation under which science should be collected.
		//
		// Type:      ExperimentSituations
		// Required:  No
		// Values:
		//     SrfLanded
		//     SrfSplashed
		//     FlyingLow
		//     FlyingHigh
		//     InSpaceLow
		//     InSpaceHigh
		situation = FlyingHigh

		// Specifies where the experiment should take place.
		//
		// Type:      BodyLocation
		// Required:  No
		// Values:
		//     Surface
		//     Space
		//
		//location = Space

		// Specifies the experiment to be run, can be any valid experiment in stock
		// KSP or added by mods.
		//
		// Type:      ScienceExperiment
		// Required:  No (multiples allowed)
		// Values (for stock KSP):
		//     asteroidSample
		//     atmosphereAnalysis
		//     barometerScan
		//     crewReport
		//     evaReport
		//     gravityScan
		//     mobileMaterialsLab
		//     mysteryGoo
		//     seismicScan
		//     surfaceSample
		//     temperatureScan
		//
		experiment = atmosphereAnalysis

		// Specifies the subject(s) that should be run.  This can be used in place
		// of the biome/situation/experiment (it contains the same information).
		// It is recommened to only use this with expressions, rather than adding
		// the subject manually.
		//
		// Type:      ScienceSubject
		// Required:  No (multiples allowed)
		//
		//subject = evaReport@MunSrfLandedCraters

		// The method for which the science must be recovered.  Note the Ideal
		// recovery method is special - it will automatically change to either
		// Recover or RecoverOrTransmit, depending whether the experiment can have
		// all its science recovered through transmission.
		//
		// Type:      ScienceRecoveryMethod
		// Required:  No
		// Values:
		//     None
		//     Recover
		//     Transmit
		//     RecoverOrTransmit
		//     Ideal
		recoveryMethod = Transmit
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

	    // Lock this parameter so that it can only be accomplished by the
		// specified craft.  Note that the name is a "define" name set via
		// the define key in a *different* VesselParameterGroup parameter
		// (which can be in the same contract, or a different one).  This
		// attribute can be specified multiple times to allow multiple vessel
		// to be available to complete the parameter.
		//
		// Type:      VesselIdentifier
		// Required:  No (multiples allowed)
		//
		vessel = Project Yliad plane
		
	    // By default if one or more vessels have been specified via the vessel
		// attribute, a child parameter will be created to indicate the vessel to
		// the player.  Set this attribute to true to hide that parameter.
		//
		// Type:      bool
		// Required:  No (defauled)
		// Default:   false
		//
		hideVesselName = True

		PARAMETER
		{
			name = VesselDestroyed
			type = VesselDestroyed
			title = Destroy the evidence
		}
	}
	
    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Project Yliad plane

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractPacks/Oddiseo/Vessels/Oddisseo experimental flyer.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = False

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            //targetBody = Kerbin

            // Orbit that the vessel should be placed in.
            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
			ORBIT			
			{
				SMA = 667667.40628801577
				ECC = 0.0050486485155354826
				INC = 0.00010057047399532557
				LPE = 16.461301380800649
				LAN = 349.18977822816123
				MNA = -1.7091057416142483
				EPH = UniversalTime()
				REF = 1
			}
			
			CREW
			{
				name = Gerndfel Kerman
				addToRoster = True
			}
        }
	}
	
	BEHAVIOUR
	{
		name = ChangeKerbalType
		type = ChangeKerbalType
		
		onState = CONTRACT_ACCEPTED

		// The KERBAL_INFO node indicates the Kerbal and the changes to be made.
		// This can be specified multiple times for different Kerbals.
		KERBAL_INFO
		{
			// The Kerbal to make changes to.
			//
			// Type:      Kerbal
			// Required:  No
			//
			kerbal = Gerndfel Kerman

			// The new type of the Kerbal.
			//
			// Type:      ProtoCrewMember.KerbalType
			// Required:  No
			// Values:
			//     Applicant
			//     Crew
			//     Tourist
			//     Unowned
			//
			kerbalType = Crew

			// The new experience trait for this Kerbal.
			//
			// Type:      string
			// Required:  No
			//
			trait = Pilot
		}
	}

	BEHAVIOUR
	{
		name = ChangeVesselOwnership
		type = ChangeVesselOwnership

		// Indicates the state where the vessel ownership should be changed.
		//
		// Type:      TriggeredBehaviour.State
		// Required:  Yes
		// Values:
		//     CONTRACT_ACCEPTED
		//     CONTRACT_FAILED
		//     CONTRACT_SUCCESS
		//     CONTRACT_COMPLETED
		//     PARAMETER_COMPLETED
		//
		onState = PARAMETER_COMPLETED

		// When the onState attribute is set to PARAMETER_COMPLETED, a value
		// must also be supplied for the parameter attribute.  This is the name
		// of the parameter that we are checking for completion.  This can be
		// specified multiple times.
		//
		// Type:      string
		// Required:  Sometimes (multiples allowed)
		//
		parameter = Rendezvous

		// The vessel for which we will be changing the ownership of.  This
		// should either be derived via an expression, or match the define
		// name of a previous VesselParameterGroup parameter.
		//
		// Type:      VesselIdentifier
		// Required:  Yes (multiples allowed)
		//
		vessel = Project Yliad plane

		// Whether to make the vessel owned or unowned.
		//
		// Type:      bool
		// Required:  No (defaulted)
		// Default:   true
		//
		owned = True
	}
	
	BEHAVIOUR
	{
		name = Message
		type = Message

		// Title of the message.  This will be displayed in the title bar.
		title = Message from Project Yliad plane

		// The actual message, can be more or less as long as desired.
		message = <i>zzzzbzzzbbbtttt</i>...can hear me? I've... <i>bbzzzzzztt</i>... comms failing, and exit hatch blocked, I'm.... <i>bzzzzzCLK</i>

		// Conditions on which the message will be displayed, can have multiple
		// conditions, and the message will get displayed once for *each*
		// condition.
		CONDITION
		{
			// The type of condition.
			//
			// Type:      Message.Condition
			// Required:  Yes
			// Values:
			//     CONTRACT_ACCEPTED
			//     CONTRACT_SUCCESS
			//     CONTRACT_COMPLETED
			//     CONTRACT_FAILED
			//     PARAMETER_COMPLETED
			//     PARAMETER_FAILED
			//
			condition = PARAMETER_COMPLETED

			// The *name* of the parameter to which this condition applies.
			// Required if the condition is one of the PARAMETER_ ones.
			//
			// Type:      string
			// Required:  See above
			//
			parameter = Rendezvous
		}
	}

	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience

		// The name of the VesselParameterGroup parameter that defines the vessel
		// whose crew we will be awarding experience to.  The list of crew members
		// is saved at the time of the parameter's completion.  When the contract
		// completes, these crew members will be awarded the experience.
		//
		// Type:      string
		// Required:  No (multiples allowed)
		//
		//parameter = VesselParameterGroupParameterName

		// Kerbal(s) to award experience to (use instead of parameter to award to
		// specific Kerbals).
		//
		// Type:      Kerbal
		// Required:  No (multiples allowed)
		//
		kerbal = Gerndfel Kerman

		// The amount of experience to award.
		//
		// Type:      int
		// Required:  No (defaulted)
		// Default:   1
		//
		experience = 1

		// Whether the experience should be immediately awarded, or if it should
		// only take effect when the crew member returns home (ie. stock logic)
		//
		// Type:      bool
		// Required:  No (defaulted)
		// Default:   false
		//
		awardImmediately = true
	}
}

