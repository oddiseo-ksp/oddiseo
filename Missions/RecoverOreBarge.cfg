CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RecoverOreBarge

    // Contract text
    title = Save our ore
    description = As you know, Mun ore mining is one of our most important revenue streams. This has been placed in peril after our engineer Henni Kerman mistook the "decouple all docking ports" button for the "fire engines retrograde" one. Our ore barge is currently floating in three separate parts, heading back down to Kerbin from the Mun. The ore is in the bottom two sections, while Henni is stuck in the top section, powerless to return home.
    synopsis = We need you to recover our most important asset: the ore! Rendezvous with each of the bottom two sections, reattach them, and bring them back down for a safe landing on Kerbin. We will generously reward you with a quarter of the value of this precious commodity. Oh, fine, then: a third!
    completedMessage = Well, that was hardly the most elegant landing we've seen, but the ore appears undamaged. Here is your quarter of the profits, as agreed.
	group = Oddiseo
	agent = Oddiseo

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 5.0 and 100.0 days, respectively
    minExpiry = 5.0
    maxExpiry = 100.0

    // Contract deadline in days.  Default is no deadline.
    //deadline = 5

	// Prestige.  If not specified, this contract type will be available at
    // any prestige level.  Otherwise, locked to the level specified.  Can
    // be specified multiple times.
    // Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Significant

    // The maximum number of times this contract type can be completed (0
    // being unlimited).
    // Default = 0
    maxCompletions = 1
	
    // The maximum instances of this contract that can be active at one
    // time.
    // Default = 4 (unless maxCompletions is set).
    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards.  Note that advanceFunds are automatically added to the
    // failureFunds.
    rewardScience = 3.0
    rewardReputation = 5.0
    rewardFunds = 50000.0
	failureReputation = 2.5
	failureFunds = 25000.0
	advanceFunds = 0.0

    // The REQUIREMENT node defines a contract requirement - a prerequisite
    // that needs to be met before the contract can be offered.  The
    // following shows an example requirement.  See the Requirements page
    // for examples of all supported requirements.
    REQUIREMENT
    {
		name = Orbit
		type = Orbit

		// Type of check to perform (manned or unmanned).  If not specified then
		// achieving this via either an unmanned or manned will count.
		//
		// Type:      ProgressCelestialBodyRequirement.CheckType
		// Required:  No
		// Values:
		//     MANNED
		//     UNMANNED
		//
		checkType = MANNED

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:      CelestialBody
		// Required:  No (defaulted)
		//
		targetBody = Mun
    }

	PARAMETER
	{
		name = Rendezvous
		type = Rendezvous
		distance = 2200.0
		vessel = Oddiseo ore barge bottom
		//title = 
	}

	PARAMETER
	{
		name = Rendezvous
		type = Rendezvous
		distance = 2200.0
		vessel = Oddiseo ore barge middle
		//title = 
	}

	PARAMETER
	{
		name = HasResource
		type = HasResource

		// The name of the resource to check for.
		//
		// Type:      Resource
		// Required:  Yes
		//
		resource = Ore

		// Minimum and maximum quantity of the resource required.
		//
		// Type:      double
		// Required:  No (defaulted)
		// Default:   0.01 (minQuantity)
		//            double.MaxValue (maxQuantity)
		//
		minQuantity = 3000.0
		//maxQuantity = 3000.0

		// Text to use for the parameter
		//
		// Type:      string
		// Required:  No (defaulted)
		// Default:   Resource: <resource>: <quantity_description>
		//title =
	}
	
	PARAMETER
	{
		name = ReturnHome
		type = ReturnHome

		// Text for the contract parameter.
		//
		// Type:      string
		// Required:  No (defaulted)
		// Default:   Return home.
		//
		//title =
	}
	
    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Oddiseo ore barge bottom

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractPacks/Oddiseo/Vessels/Oddiseo Ore barge bottom.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = False

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            //targetBody = Kerbin

            // Orbit that the vessel should be placed in.
            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
			ORBIT
			{
				SMA = 3999999.999995145
				ECC = 0.83125000000135396
				INC = 90.000000000044935
				LPE = 359.9999999999356
				LAN = 9.9999960639252095E-05
				MNA = -3.0849910436606462
				EPH = UniversalTime()
				REF = 1
			}
		}
	}
	
	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = Oddiseo ore barge middle
			craftURL = ContractPacks/Oddiseo/Vessels/Oddiseo Ore barge middle.craft
			owned = False

			ORBIT
			{
				SMA = 3999999.9999926132
				ECC = 0.83125000000211169
				INC = 89.999999999902286
				LPE = 359.99999999992076
				LAN = 9.9999938015571388E-05
				MNA = -3.0837742259623231
				EPH = UniversalTime() + 5
				REF = 1
			}
		}
	}

	BEHAVIOUR
	{
		name = SpawnVessel
		type = SpawnVessel

		VESSEL
		{
			name = Oddiseo ore barge top
			craftURL = ContractPacks/Oddiseo/Vessels/Oddiseo Ore barge top.craft
			owned = False

			ORBIT
			{
				SMA = 3999999.9999940763
				ECC = 0.83125000000199123
				INC = 89.999999999984183
				LPE = 359.99999999992087
				LAN = 9.9999937958727969E-05
				MNA = -3.0825715026792775
				EPH = UniversalTime() + 10
				REF = 1
			}
			
			CREW
			{
				name = Henni Kerman
				addToRoster = True
			}
		}
	}
	
	BEHAVIOUR
	{
		name = ChangeKerbalType
		type = ChangeKerbalType
		
		onState = CONTRACT_ACCEPTED

		// The KERBAL_INFO node indicates the Kerbal and the changes to be made.
		// This can be specified multiple times for different Kerbals.
		KERBAL_INFO
		{
			// The Kerbal to make changes to.
			//
			// Type:      Kerbal
			// Required:  No
			//
			kerbal = Henni Kerman

			// The new type of the Kerbal.
			//
			// Type:      ProtoCrewMember.KerbalType
			// Required:  No
			// Values:
			//     Applicant
			//     Crew
			//     Tourist
			//     Unowned
			//
			kerbalType = Crew

			// The new experience trait for this Kerbal.
			//
			// Type:      string
			// Required:  No
			//
			trait = Engineer
		}
	}
	
	BEHAVIOUR
	{
		name = AwardExperience
		type = AwardExperience

		// The name of the VesselParameterGroup parameter that defines the vessel
		// whose crew we will be awarding experience to.  The list of crew members
		// is saved at the time of the parameter's completion.  When the contract
		// completes, these crew members will be awarded the experience.
		//
		// Type:      string
		// Required:  No (multiples allowed)
		//
		//parameter = VesselParameterGroupParameterName

		// Kerbal(s) to award experience to (use instead of parameter to award to
		// specific Kerbals).
		//
		// Type:      Kerbal
		// Required:  No (multiples allowed)
		//
		kerbal = Henni Kerman

		// The amount of experience to award.
		//
		// Type:      int
		// Required:  No (defaulted)
		// Default:   1
		//
		experience = 1

		// Whether the experience should be immediately awarded, or if it should
		// only take effect when the crew member returns home (ie. stock logic)
		//
		// Type:      bool
		// Required:  No (defaulted)
		// Default:   false
		//
		awardImmediately = false
	}
}

