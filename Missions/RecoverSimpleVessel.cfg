CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = RecoverTouristVessel

    // Contract text
    title = Bring back tourist orbiter
    description = One of our tourist missions has gone a little... off-plan. We've not heard from our pilot Geobb Kerman for the past five hours, and suspect there may be some sort of technical glitch with the vessel. Even more worryingly, the two tourists, Allouduin and Gonala Kerman, have connections with one of the biggest legal firms on Kerbin.\n\nNote that at last communication, the vessel had sufficient fuel for re-entry, and our own state-of-the-art capsule comes with batteries and parachutes attached. If for whatever reason Geobb's controls are non-functional, there's also a backup probe core sitting in hibernation mode.
    synopsis = We hate to come to you of all people, but we need these tourists down and home... pronto. Make contact with the vessel, fix whatever's wrong with it, and land it back down on Kerbin. We'll take over from there.
	
    completedMessage = Allouduin and Gonala Kerman are back home, and after extended negotiations, have decided not to sue us! We are regretfully indebted to you.
	group = Oddiseo
	agent = Oddiseo

    // Contract min/max expiry in days.  If both are set to 0.0, it will
    // result in a contract that never expires.
    // Default = 5.0 and 100.0 days, respectively
    minExpiry = 5.0
    maxExpiry = 25.0

    // Contract deadline in days.  Default is no deadline.
    deadline = 5

	// Prestige.  If not specified, this contract type will be available at
    // any prestige level.  Otherwise, locked to the level specified.  Can
    // be specified multiple times.
    // Values from Contract.ContractPrestige:
    //     Trivial
    //     Significant
    //     Exceptional
    prestige = Trivial

    // The maximum number of times this contract type can be completed (0
    // being unlimited).
    // Default = 0
    maxCompletions = 1
	
    // The maximum instances of this contract that can be active at one
    // time.
    // Default = 4 (unless maxCompletions is set).
    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards.  Note that advanceFunds are automatically added to the
    // failureFunds.
    rewardScience = 2.5
    rewardReputation = 3.0
    rewardFunds = 20000.0
	failureReputation = 1.0
	failureFunds = 0.0
	advanceFunds = 20000.0

    // The REQUIREMENT node defines a contract requirement - a prerequisite
    // that needs to be met before the contract can be offered.  The
    // following shows an example requirement.  See the Requirements page
    // for examples of all supported requirements.
    REQUIREMENT
    {
		name = Orbit
		type = Orbit

		// Type of check to perform (manned or unmanned).  If not specified then
		// achieving this via either an unmanned or manned will count.
		//
		// Type:      ProgressCelestialBodyRequirement.CheckType
		// Required:  No
		// Values:
		//     MANNED
		//     UNMANNED
		//
		checkType = MANNED

		// Target body, defaulted from the contract if not supplied.
		//
		// Type:      CelestialBody
		// Required:  No (defaulted)
		//
		//targetBody = Kerbin
    }

	PARAMETER
	{
		name = Rendezvous
		type = Rendezvous
		distance = 1500.0
		vessel = Oddiseo tourist orbiter
		title = Get within sighting distance of the tourist orbiter
	}

	PARAMETER
	{
		name = VesselParameterGroup
		type = VesselParameterGroup

	    // Lock this parameter so that it can only be accomplished by the
		// specified craft.  Note that the name is a "define" name set via
		// the define key in a *different* VesselParameterGroup parameter
		// (which can be in the same contract, or a different one).  This
		// attribute can be specified multiple times to allow multiple vessel
		// to be available to complete the parameter.
		//
		// Type:      VesselIdentifier
		// Required:  No (multiples allowed)
		//
		vessel = Oddiseo tourist orbiter
		
	    // By default if one or more vessels have been specified via the vessel
		// attribute, a child parameter will be created to indicate the vessel to
		// the player.  Set this attribute to true to hide that parameter.
		//
		// Type:      bool
		// Required:  No (defauled)
		// Default:   false
		//
		hideVesselName = True

		PARAMETER
		{
			name = RecoverVessel
			type = RecoverVessel
		}
		
		PARAMETER
		{
			name = VesselNotDestroyed
			type = VesselNotDestroyed
			title = Keep the vessel intact
		}
	}
	
	PARAMETER
	{
		name = RecoverKerbalA
		type = RecoverKerbal

		// The Kerbal(s) to be recovered.
		//
		// Type:      Kerbal
		// Required:  No (multiples allowed)
		//
		kerbal = Allouduin Kerman

		// Alternate method of identifying the Kerbal - zero based index of the
		// entry in a SpawnKerbal or SpawnVessel BEHAVIOUR node.
		//
		// Type:      int
		// Required:  No (defaulted)
		// Default:   0
		//
		index = 0

		// Text to use for the parameter
		// Default = 
		//
		// Type:      string
		// Required:  No (defaulted)
		// Default:   <kerbal>: Recovered
		//
		//title =
	}

	PARAMETER
	{
		name = RecoverKerbalG
		type = RecoverKerbal
		kerbal = Gonala Kerman
	}
	
    BEHAVIOUR
    {
        name = SpawnVessel
        type = SpawnVessel

        VESSEL
        {
            // If the name is not supplied, defaults from the name within the
            // craft file
            name = Oddiseo tourist orbiter

            // Path to the .craft file (relative to the GameData/ directory)
            craftURL = ContractPacks/Oddiseo/Vessels/Damaged Oddiseo tourist orbiter.craft

            // Whether the vessel should show up as owned or unowned.  If it is
            // owned, then it will be immediately selectable.
            owned = False

            // Where the vessel should spawn - defaulted from the contract if
            // not supplied.
            //targetBody = Kerbin

            // Orbit that the vessel should be placed in.
            // Note that REF represents the reference body - but will be
            // overriden by the targetBody.
			ORBIT
			{
				SMA = 681866.58975289564
				ECC = 0.0099999990390184715
				INC = Random(-8, 8)
				LPE = 0.00070688253189256584
				LAN = 0.00010026091274539795
				MNA = 1.5860364733617713
				EPH = UniversalTime()
				REF = 1
			}
			
			CREW
			{
				name = Allouduin Kerman
				addToRoster = False
			}
			
			CREW
			{
				name = Gonala Kerman
				addToRoster = False
			}
        }
	}
	
	BEHAVIOUR
	{
		name = ChangeKerbalTypeA
		type = ChangeKerbalType
		
		onState = CONTRACT_ACCEPTED

		// The KERBAL_INFO node indicates the Kerbal and the changes to be made.
		// This can be specified multiple times for different Kerbals.
		KERBAL_INFO
		{
			// The Kerbal to make changes to.
			//
			// Type:      Kerbal
			// Required:  No
			//
			kerbal = Allouduin Kerman

			// The new type of the Kerbal.
			//
			// Type:      ProtoCrewMember.KerbalType
			// Required:  No
			// Values:
			//     Applicant
			//     Crew
			//     Tourist
			//     Unowned
			//
			kerbalType = Tourist

			// The new experience trait for this Kerbal.
			//
			// Type:      string
			// Required:  No
			//
			trait = Tourist
		}
	}
	
	BEHAVIOUR
	{
		name = ChangeKerbalTypeG
		type = ChangeKerbalType
		
		onState = CONTRACT_ACCEPTED

		KERBAL_INFO
		{
			kerbal = Gonala Kerman
			kerbalType = Tourist
			trait = Tourist
		}
	}
	
	BEHAVIOUR
	{
		name = Message
		type = Message

		// Title of the message.  This will be displayed in the title bar.
		title = Message from Oddiseo Corp

		// The actual message, can be more or less as long as desired.
		message = That's our vessel! And it's... uh... well, I guess recovering Geobb was never a condition of our contract.

		// Conditions on which the message will be displayed, can have multiple
		// conditions, and the message will get displayed once for *each*
		// condition.
		CONDITION
		{
			// The type of condition.
			//
			// Type:      Message.Condition
			// Required:  Yes
			// Values:
			//     CONTRACT_ACCEPTED
			//     CONTRACT_SUCCESS
			//     CONTRACT_COMPLETED
			//     CONTRACT_FAILED
			//     PARAMETER_COMPLETED
			//     PARAMETER_FAILED
			//
			condition = PARAMETER_COMPLETED

			// The *name* of the parameter to which this condition applies.
			// Required if the condition is one of the PARAMETER_ ones.
			//
			// Type:      string
			// Required:  See above
			//
			parameter = Rendezvous
		}
	}
	
	BEHAVIOUR
	{
		name = ChangeVesselOwnership
		type = ChangeVesselOwnership

		// Indicates the state where the vessel ownership should be changed.
		//
		// Type:      TriggeredBehaviour.State
		// Required:  Yes
		// Values:
		//     CONTRACT_ACCEPTED
		//     CONTRACT_FAILED
		//     CONTRACT_SUCCESS
		//     CONTRACT_COMPLETED
		//     PARAMETER_COMPLETED
		//
		onState = PARAMETER_COMPLETED

		// When the onState attribute is set to PARAMETER_COMPLETED, a value
		// must also be supplied for the parameter attribute.  This is the name
		// of the parameter that we are checking for completion.  This can be
		// specified multiple times.
		//
		// Type:      string
		// Required:  Sometimes (multiples allowed)
		//
		parameter = Rendezvous

		// The vessel for which we will be changing the ownership of.  This
		// should either be derived via an expression, or match the define
		// name of a previous VesselParameterGroup parameter.
		//
		// Type:      VesselIdentifier
		// Required:  Yes (multiples allowed)
		//
		vessel = Oddiseo tourist orbiter

		// Whether to make the vessel owned or unowned.
		//
		// Type:      bool
		// Required:  No (defaulted)
		// Default:   true
		//
		owned = True
	}
}

